Index: pkg/apiserver/handlers/node.go
===================================================================
diff --git a/pkg/apiserver/handlers/node.go b/pkg/apiserver/handlers/node.go
deleted file mode 100644
--- a/pkg/apiserver/handlers/node.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ /dev/null	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
@@ -1,1 +0,0 @@
-package handlers
Index: pkg/apiserver/handlers/pod.go
===================================================================
diff --git a/pkg/apiserver/handlers/pod.go b/pkg/apiserver/handlers/pod.go
deleted file mode 100644
--- a/pkg/apiserver/handlers/pod.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ /dev/null	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
@@ -1,1 +0,0 @@
-package handlers
Index: pkg/apiserver/url/types.go
===================================================================
diff --git a/pkg/apiserver/url/types.go b/pkg/apiserver/url/types.go
deleted file mode 100644
--- a/pkg/apiserver/url/types.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ /dev/null	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
@@ -1,10 +0,0 @@
-package url
-
-type Node struct {
-	Id   string
-	Name string
-}
-
-type NodeResource struct {
-	users map[string]Node
-}
Index: pkg/object/Node.go
===================================================================
diff --git a/pkg/object/Node.go b/pkg/object/Node.go
deleted file mode 100644
--- a/pkg/object/Node.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ /dev/null	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
@@ -1,15 +0,0 @@
-package object
-
-type Node struct {
-	Name   string
-	IP     string
-	Status NodeStatus
-}
-
-type NodeStatus int
-
-const (
-	RUN   NodeStatus = 0
-	STOP  NodeStatus = 1
-	ERROR NodeStatus = 2
-)
Index: cmd/kubelet/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"gopkg.in/yaml.v3\"\r\n\tpod2 \"k8s/pkg/api/pod\"\r\n\t\"log\"\r\n\t\"os\"\r\n\t\"time\"\r\n)\r\n\r\nfunc init() {\r\n\tlogFile, err := os.OpenFile(\"log/\"+time.Now().Format(\"15_04_05\")+\".log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"open log file failed, err:\", err)\r\n\t\treturn\r\n\t}\r\n\tlog.SetOutput(logFile)\r\n\tlog.SetFlags(log.Lshortfile | log.Lmicroseconds)\r\n\tlog.SetPrefix(\"[Pod]\")\r\n}\r\n\r\nfunc main() {\r\n\t// 解析pod的yaml配置文件\r\n\tdataBytes, err := os.ReadFile(\"pkg/api/kubelet/pod/podConfigTest.yaml\")\r\n\tvar podData pod2.Pod\r\n\terr2 := yaml.Unmarshal(dataBytes, &podData)\r\n\tif err2 != nil {\r\n\t\tfmt.Println(\"解析 yaml 文件失败：\", err)\r\n\t}\r\n\tfmt.Println(podData)\r\n\r\n\t// 根据配置文件创建容器\r\n\terr = pod2.CreatePod(podData)\r\n\tif err != nil {\r\n\t\tfmt.Println(err.Error())\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmd/kubelet/main.go b/cmd/kubelet/main.go
--- a/cmd/kubelet/main.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/cmd/kubelet/main.go	(date 1682325286234)
@@ -3,7 +3,8 @@
 import (
 	"fmt"
 	"gopkg.in/yaml.v3"
-	pod2 "k8s/pkg/api/pod"
+	"k8s/object"
+	pod2 "k8s/pkg/kubelet/pod"
 	"log"
 	"os"
 	"time"
@@ -23,7 +24,7 @@
 func main() {
 	// 解析pod的yaml配置文件
 	dataBytes, err := os.ReadFile("pkg/api/kubelet/pod/podConfigTest.yaml")
-	var podData pod2.Pod
+	var podData object.Pod
 	err2 := yaml.Unmarshal(dataBytes, &podData)
 	if err2 != nil {
 		fmt.Println("解析 yaml 文件失败：", err)
Index: pkg/apiserver/apiserver.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package apiserver\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"k8s/pkg/etcd\"\r\n)\r\n\r\nfunc CreatePod() {\r\n\tfmt.Printf(\"apiserver: create pod\\n\")\r\n}\r\n\r\nfunc DeletePod() {\r\n\tfmt.Printf(\"apiserver: delete pod\\n\")\r\n}\r\n\r\nfunc DescribePod() {\r\n\tfmt.Printf(\"apiserver: describe pod\\n\")\r\n}\r\n\r\nfunc DescribeService() {\r\n\tfmt.Printf(\"apiserver: describe service\\n\")\r\n}\r\n\r\nfunc EtcdGetOne(key string) string {\r\n\tres := etcd.GetOne(key)\r\n\tif res == \"\" {\r\n\t\tfmt.Printf(\"get key %s from etcd failed\", key)\r\n\t}\r\n\treturn res\r\n}\r\n\r\nfunc EtcdGetDirectory(prefix string) map[string]string {\r\n\tres := etcd.GetDirectory(prefix)\r\n\tif res == nil {\r\n\t\tfmt.Printf(\"get directory %s from etcd failed\", prefix)\r\n\t}\r\n\treturn res\r\n}\r\n\r\nfunc EtcdPut(key string, val string) bool {\r\n\tres := etcd.Put(key, val)\r\n\treturn res\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/apiserver/apiserver.go b/pkg/apiserver/apiserver.go
--- a/pkg/apiserver/apiserver.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/apiserver/apiserver.go	(date 1682327584226)
@@ -2,42 +2,77 @@
 
 import (
 	"fmt"
+	"k8s/pkg/apiserver/listeners"
 	"k8s/pkg/etcd"
 )
 
-func CreatePod() {
-	fmt.Printf("apiserver: create pod\n")
-}
+var MQHost = "amqp://guest:guest@localhost:5672/"
+var EtcdHost = "localhost:2379"
 
-func DeletePod() {
-	fmt.Printf("apiserver: delete pod\n")
+/*-----------------APIServer-----------------*/
+
+type APIServer struct {
+	etcdWatcher *etcd.EtcdWatcher
+	podListener *listeners.PodListener
+	//TODO 在此添加其他listener……
 }
 
-func DescribePod() {
-	fmt.Printf("apiserver: describe pod\n")
-}
+// CreateAPIServer 初始化APIServer结构体中的内容
+func CreateAPIServer() (*APIServer, error) {
+	etcdWatcher, err := etcd.NewEtcdWatcher([]string{EtcdHost})
+	if err != nil {
+		fmt.Println(err.Error())
+		return nil, err
+	}
+	podListener := listeners.NewPodListener()
 
-func DescribeService() {
-	fmt.Printf("apiserver: describe service\n")
-}
+	server := APIServer{
+		etcdWatcher: etcdWatcher,
+		podListener: podListener,
+	}
 
-func EtcdGetOne(key string) string {
-	res := etcd.GetOne(key)
-	if res == "" {
-		fmt.Printf("get key %s from etcd failed", key)
-	}
-	return res
+	return &server, nil
 }
 
-func EtcdGetDirectory(prefix string) map[string]string {
-	res := etcd.GetDirectory(prefix)
-	if res == nil {
-		fmt.Printf("get directory %s from etcd failed", prefix)
-	}
-	return res
+// StartServer 开始监听相关端口请求
+func (s *APIServer) StartServer() {
+	s.etcdWatcher.AddWatch("/registry/pods/", true, s.podListener)
 }
 
-func EtcdPut(key string, val string) bool {
-	res := etcd.Put(key, val)
-	return res
-}
+//
+//func CreatePod() {
+//	fmt.Printf("apiserver: create pod\n")
+//}
+//
+//func DeletePod() {
+//	fmt.Printf("apiserver: delete pod\n")
+//}
+//
+//func DescribePod() {
+//	fmt.Printf("apiserver: describe pod\n")
+//}
+//
+//func DescribeService() {
+//	fmt.Printf("apiserver: describe service\n")
+//}
+//
+//func EtcdGetOne(key string) string {
+//	res := etcd.GetOne(key)
+//	if res == "" {
+//		fmt.Printf("get key %s from etcd failed", key)
+//	}
+//	return res
+//}
+//
+//func EtcdGetDirectory(prefix string) map[string]string {
+//	res := etcd.GetDirectory(prefix)
+//	if res == nil {
+//		fmt.Printf("get directory %s from etcd failed", prefix)
+//	}
+//	return res
+//}
+//
+//func EtcdPut(key string, val string) bool {
+//	res := etcd.Put(key, val)
+//	return res
+//}
Index: pkg/etcd/watcher.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package etcd\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"github.com/coreos/etcd/clientv3\"\r\n\tstoragepb2 \"github.com/coreos/etcd/storage/storagepb\"\r\n\t\"sync\"\r\n\t\"time\"\r\n)\r\n\r\n// 此文件包含了对etcd watch机制的封装函数\r\n// 在handler中实现listener接口并添加监听回调函数即可实时对etcd状态变化做出响应\r\n\r\nvar (\r\n\ttimeOut = time.Duration(3) * time.Second // 超时\r\n)\r\n\r\n// Listener 对外通知\r\ntype Listener interface {\r\n\tOnSet([]byte, []byte)\r\n\tOnModify([]byte, []byte)\r\n\tOnDelete([]byte)\r\n}\r\n\r\n// EtcdWatcher ETCD key监视器\r\ntype EtcdWatcher struct {\r\n\tclient       *clientv3.Client // etcd client\r\n\twaitGroup    sync.WaitGroup\r\n\tlistener     Listener\r\n\tmutex        sync.Mutex\r\n\tcloseHandler map[string]func()\r\n}\r\n\r\n// NewEtcdWatcher 构造\r\nfunc NewEtcdWatcher(servers []string) (*EtcdWatcher, error) {\r\n\tcli, err := clientv3.New(clientv3.Config{\r\n\t\tEndpoints:   servers,\r\n\t\tDialTimeout: timeOut,\r\n\t})\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tew := &EtcdWatcher{\r\n\t\tclient:       cli,\r\n\t\tcloseHandler: make(map[string]func()),\r\n\t}\r\n\r\n\treturn ew, nil\r\n}\r\n\r\n// AddWatch 添加监视\r\nfunc (watcher *EtcdWatcher) AddWatch(key string, prefix bool, listener Listener) bool {\r\n\twatcher.mutex.Lock()\r\n\tdefer watcher.mutex.Unlock()\r\n\tif _, ok := watcher.closeHandler[key]; ok {\r\n\t\t// 已有对该资源的监视\r\n\t\treturn false\r\n\t}\r\n\tctx, cancel := context.WithCancel(context.Background())\r\n\twatcher.closeHandler[key] = cancel\r\n\r\n\twatcher.waitGroup.Add(1)\r\n\tgo watcher.watch(ctx, key, prefix, listener)\r\n\r\n\treturn true\r\n}\r\n\r\n// RemoveWatch 删除监视\r\nfunc (watcher *EtcdWatcher) RemoveWatch(key string) bool {\r\n\twatcher.mutex.Lock()\r\n\tdefer watcher.mutex.Unlock()\r\n\tcancel, ok := watcher.closeHandler[key]\r\n\tif !ok {\r\n\t\t// 不存在对该资源的监视\r\n\t\treturn false\r\n\t}\r\n\tcancel()\r\n\tdelete(watcher.closeHandler, key)\r\n\r\n\treturn true\r\n}\r\n\r\n// ClearWatch 清除所有监视\r\nfunc (watcher *EtcdWatcher) ClearWatch() {\r\n\twatcher.mutex.Lock()\r\n\tdefer watcher.mutex.Unlock()\r\n\tfor k := range watcher.closeHandler {\r\n\t\twatcher.closeHandler[k]()\r\n\t}\r\n\twatcher.closeHandler = make(map[string]func())\r\n}\r\n\r\n// Close 关闭\r\nfunc (watcher *EtcdWatcher) Close(wait bool) {\r\n\twatcher.ClearWatch()\r\n\r\n\tif wait {\r\n\t\twatcher.waitGroup.Wait()\r\n\t}\r\n\r\n\twatcher.client.Close()\r\n\twatcher.client = nil\r\n}\r\n\r\n// watch 监听的主要逻辑（协程）\r\nfunc (watcher *EtcdWatcher) watch(ctx context.Context, key string, prefix bool, listener Listener) error {\r\n\tdefer watcher.waitGroup.Done()\r\n\r\n\tctx1, cancel := context.WithTimeout(context.Background(), timeOut)\r\n\tdefer cancel()\r\n\tvar getResp *clientv3.GetResponse\r\n\tvar err error\r\n\tif prefix {\r\n\t\tgetResp, err = watcher.client.Get(ctx1, key, clientv3.WithPrefix())\r\n\t} else {\r\n\t\tgetResp, err = watcher.client.Get(ctx1, key)\r\n\t}\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tfor _, ev := range getResp.Kvs {\r\n\t\tlistener.OnSet(ev.Key, ev.Value)\r\n\t}\r\n\r\n\tvar watchChan clientv3.WatchChan\r\n\tif prefix {\r\n\t\twatchChan = watcher.client.Watch(context.Background(), key, clientv3.WithPrefix(), clientv3.WithRev(getResp.Header.Revision+1))\r\n\t} else {\r\n\t\twatchChan = watcher.client.Watch(context.Background(), key, clientv3.WithRev(getResp.Header.Revision+1))\r\n\t}\r\n\tfor {\r\n\t\tselect {\r\n\t\tcase <-ctx.Done():\r\n\t\t\treturn nil\r\n\t\tcase resp := <-watchChan:\r\n\t\t\terr := resp.Err()\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn err\r\n\t\t\t}\r\n\t\t\tfor _, ev := range resp.Events {\r\n\t\t\t\tswitch ev.Type {\r\n\t\t\t\tcase storagepb2.PUT:\r\n\t\t\t\t\tlistener.OnModify(ev.Kv.Key, ev.Kv.Value)\r\n\t\t\t\tcase storagepb2.DELETE:\r\n\t\t\t\t\tlistener.OnDelete(ev.Kv.Key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/etcd/watcher.go b/pkg/etcd/watcher.go
--- a/pkg/etcd/watcher.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/etcd/watcher.go	(date 1682326473943)
@@ -17,9 +17,9 @@
 
 // Listener 对外通知
 type Listener interface {
-	OnSet([]byte, []byte)
-	OnModify([]byte, []byte)
-	OnDelete([]byte)
+	OnSet(kv storagepb2.KeyValue)
+	OnModify(kv storagepb2.KeyValue)
+	OnDelete(kv storagepb2.KeyValue)
 }
 
 // EtcdWatcher ETCD key监视器
@@ -121,7 +121,7 @@
 	}
 
 	for _, ev := range getResp.Kvs {
-		listener.OnSet(ev.Key, ev.Value)
+		listener.OnSet(*ev)
 	}
 
 	var watchChan clientv3.WatchChan
@@ -142,9 +142,9 @@
 			for _, ev := range resp.Events {
 				switch ev.Type {
 				case storagepb2.PUT:
-					listener.OnModify(ev.Kv.Key, ev.Kv.Value)
+					listener.OnModify(*ev.Kv)
 				case storagepb2.DELETE:
-					listener.OnDelete(ev.Kv.Key)
+					listener.OnDelete(*ev.Kv)
 				}
 			}
 		}
Index: object/Node.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/object/Node.go b/object/Node.go
new file mode 100644
--- /dev/null	(date 1682325025826)
+++ b/object/Node.go	(date 1682325025826)
@@ -0,0 +1,11 @@
+package object
+
+type NodeStorage struct {
+	Node   Node
+	Status Status
+}
+
+type Node struct {
+	Name string
+	IP   string
+}
Index: object/global.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/object/global.go b/object/global.go
new file mode 100644
--- /dev/null	(date 1682324743035)
+++ b/object/global.go	(date 1682324743035)
@@ -0,0 +1,9 @@
+package object
+
+type Status int
+
+const (
+	RUNNING Status = 0
+	STOPPED Status = 1
+	PENDING Status = 2
+)
Index: pkg/util/msgQueue/publisher/publisher.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package publisher\r\n\r\nimport (\r\n\t\"github.com/streadway/amqp\"\r\n)\r\n\r\ntype Publisher struct {\r\n\tconnection *amqp.Connection\r\n\thost       string\r\n}\r\n\r\n// NewPublisher 创建一个Publisher并且返回其指针\r\nfunc NewPublisher(host string) (*Publisher, error) {\r\n\tconn, _ := amqp.Dial(host)\r\n\tpub := new(Publisher)\r\n\tpub.host = host\r\n\r\n\tpub.connection = conn\r\n\treturn pub, nil\r\n}\r\n\r\n// Publish 向指定的交换机广播一条信息并立即返回，广播类型为FANOUT\r\nfunc (p *Publisher) Publish(queueName string, body []byte, contentType string) error {\r\n\tch, err := p.connection.Channel()\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer ch.Close()\r\n\r\n\terr = ch.ExchangeDeclare(\r\n\t\tqueueName,\r\n\t\tamqp.ExchangeFanout,\r\n\t\ttrue,\r\n\t\tfalse,\r\n\t\tfalse,\r\n\t\tfalse,\r\n\t\tnil)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\terr = ch.Publish(\r\n\t\tqueueName,\r\n\t\tqueueName,\r\n\t\tfalse,\r\n\t\tfalse,\r\n\t\tamqp.Publishing{\r\n\t\t\tContentType: contentType,\r\n\t\t\tBody:        body,\r\n\t\t})\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n// CloseConnection 关闭到消息队列的连接\r\nfunc (p *Publisher) CloseConnection() error {\r\n\tif !p.connection.IsClosed() {\r\n\t\terr := p.connection.Close()\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\t}\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/util/msgQueue/publisher/publisher.go b/pkg/util/msgQueue/publisher/publisher.go
--- a/pkg/util/msgQueue/publisher/publisher.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/util/msgQueue/publisher/publisher.go	(date 1682327583928)
@@ -20,7 +20,7 @@
 }
 
 // Publish 向指定的交换机广播一条信息并立即返回，广播类型为FANOUT
-func (p *Publisher) Publish(queueName string, body []byte, contentType string) error {
+func (p *Publisher) Publish(exchangeName string, body []byte, contentType string) error {
 	ch, err := p.connection.Channel()
 	if err != nil {
 		return err
@@ -28,7 +28,7 @@
 	defer ch.Close()
 
 	err = ch.ExchangeDeclare(
-		queueName,
+		exchangeName,
 		amqp.ExchangeFanout,
 		true,
 		false,
@@ -40,8 +40,8 @@
 	}
 
 	err = ch.Publish(
-		queueName,
-		queueName,
+		exchangeName,
+		exchangeName,
 		false,
 		false,
 		amqp.Publishing{
Index: pkg/util/msgQueue/subscriber/subscriber.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package subscriber\r\n\r\nimport \"github.com/streadway/amqp\"\r\n\r\ntype Subscriber struct {\r\n\thost       string\r\n\tconnection *amqp.Connection\r\n\thandler    Handler\r\n}\r\n\r\ntype Handler interface {\r\n\tHandle([]byte)\r\n}\r\n\r\n// NewSubscriber 创建一个Subscriber并且返回其指针\r\nfunc NewSubscriber(host string) (*Subscriber, error) {\r\n\tconn, _ := amqp.Dial(host)\r\n\tsub := new(Subscriber)\r\n\tsub.host = host\r\n\tsub.connection = conn\r\n\treturn sub, nil\r\n}\r\n\r\n// Subscribe 将队列与指定交换机绑定并开始监听，传入参数为队列名称、\r\nfunc (p *Subscriber) Subscribe(queueName string, handler Handler) error {\r\n\tch, err := p.connection.Channel()\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\tdefer ch.Close()\r\n\r\n\t// queueName 对外是队列名称，实际是交换机名称\r\n\terr = ch.ExchangeDeclare(\r\n\t\tqueueName,\r\n\t\tamqp.ExchangeFanout,\r\n\t\ttrue,\r\n\t\tfalse,\r\n\t\tfalse,\r\n\t\tfalse,\r\n\t\tnil)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\t// 使用临时队列，不指定名称而是自动生成\r\n\tq, err := ch.QueueDeclare(\r\n\t\t\"\",    // name\r\n\t\tfalse, // durable\r\n\t\tfalse, // delete when unused\r\n\t\ttrue,  // exclusive\r\n\t\tfalse, // no-wait\r\n\t\tnil,   // arguments\r\n\t)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\terr = ch.QueueBind(\r\n\t\tq.Name,    // queue name\r\n\t\t\"\",        // routing key\r\n\t\tqueueName, // exchange\r\n\t\tfalse,\r\n\t\tnil,\r\n\t)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tmsgs, err := ch.Consume(\r\n\t\tq.Name, // queue\r\n\t\t\"\",     // consumer\r\n\t\ttrue,   // auto-ack\r\n\t\tfalse,  // exclusive\r\n\t\tfalse,  // no-local\r\n\t\tfalse,  // no-wait\r\n\t\tnil,    // args\r\n\t)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tforever := make(chan bool)\r\n\r\n\t// 处理队列中消息的协程\r\n\tgo func() {\r\n\t\tfor d := range msgs {\r\n\t\t\t// 可根据d.contentType选择不同的处理函数\r\n\t\t\thandler.Handle(d.Body)\r\n\t\t}\r\n\t}()\r\n\r\n\t//log.Printf(\" [*] Waiting for logs. To exit press CTRL+C\")\r\n\t<-forever\r\n\treturn nil\r\n\r\n}\r\n\r\n// CloseConnection 关闭到消息队列的连接\r\nfunc (p *Subscriber) CloseConnection() error {\r\n\tif !p.connection.IsClosed() {\r\n\t\terr := p.connection.Close()\r\n\t\tif err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\t}\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/util/msgQueue/subscriber/subscriber.go b/pkg/util/msgQueue/subscriber/subscriber.go
--- a/pkg/util/msgQueue/subscriber/subscriber.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/util/msgQueue/subscriber/subscriber.go	(date 1682327583940)
@@ -22,16 +22,15 @@
 }
 
 // Subscribe 将队列与指定交换机绑定并开始监听，传入参数为队列名称、
-func (p *Subscriber) Subscribe(queueName string, handler Handler) error {
+func (p *Subscriber) Subscribe(exchangeName string, handler Handler) error {
 	ch, err := p.connection.Channel()
 	if err != nil {
 		return err
 	}
 	defer ch.Close()
 
-	// queueName 对外是队列名称，实际是交换机名称
 	err = ch.ExchangeDeclare(
-		queueName,
+		exchangeName,
 		amqp.ExchangeFanout,
 		true,
 		false,
@@ -56,9 +55,9 @@
 	}
 
 	err = ch.QueueBind(
-		q.Name,    // queue name
-		"",        // routing key
-		queueName, // exchange
+		q.Name,       // queue name
+		"",           // routing key
+		exchangeName, // exchange
 		false,
 		nil,
 	)
Index: pkg/apiserver/listeners/podListener.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/apiserver/listeners/podListener.go b/pkg/apiserver/listeners/podListener.go
new file mode 100644
--- /dev/null	(date 1682327583923)
+++ b/pkg/apiserver/listeners/podListener.go	(date 1682327583923)
@@ -0,0 +1,64 @@
+package listeners
+
+import (
+	"encoding/json"
+	"fmt"
+	storagepb2 "github.com/coreos/etcd/storage/storagepb"
+	"k8s/pkg/apiserver"
+	"k8s/pkg/util/msgQueue/publisher"
+	log "log"
+)
+
+/*-----------------Pod Etcd Listener---------------*/
+
+type PodListener struct {
+	publisher *publisher.Publisher
+}
+
+func NewPodListener() *PodListener {
+	newPublisher, _ := publisher.NewPublisher(apiserver.MQHost)
+	listener := PodListener{
+		publisher: newPublisher,
+	}
+	return &listener
+}
+
+/*-----------------Pod Etcd Handler-----------------*/
+
+// OnSet apiserver设置了对该资源的监听时回调
+func (p PodListener) OnSet(kv storagepb2.KeyValue) {
+	log.Printf("ETCD: set watcher of key " + string(kv.Key) + "\n")
+	return
+}
+
+// OnModify etcd中对应资源被修改时回调
+func (p PodListener) OnModify(kv storagepb2.KeyValue) {
+	log.Printf("ETCD: modify kye:" + string(kv.Key) + "value:" + string(kv.Value) + "\n")
+	jsonMsg, err := json.Marshal(kv)
+	if err != nil {
+		fmt.Println(err.Error())
+		return
+	}
+	err = p.publisher.Publish("pods", jsonMsg, "PUT")
+	if err != nil {
+		fmt.Println(err.Error())
+		return
+	}
+	return
+}
+
+// OnDelete etcd中对应资源被删除时回调
+func (p PodListener) OnDelete(kv storagepb2.KeyValue) {
+	log.Printf("ETCD: delete kye:" + string(kv.Key) + "\n")
+	jsonMsg, err := json.Marshal(kv)
+	if err != nil {
+		fmt.Println(err.Error())
+		return
+	}
+	err = p.publisher.Publish("pods", jsonMsg, "DEL")
+	if err != nil {
+		fmt.Println(err.Error())
+		return
+	}
+	return
+}
Index: pkg/api/pod/container.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/api/pod/container.go b/pkg/kubelet/pod/container.go
rename from pkg/api/pod/container.go
rename to pkg/kubelet/pod/container.go
--- a/pkg/api/pod/container.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/kubelet/pod/container.go	(date 1682325286267)
@@ -12,6 +12,7 @@
 	"github.com/docker/docker/client"
 	"github.com/docker/go-connections/nat"
 	"io"
+	"k8s/object"
 	"log"
 	"strconv"
 )
@@ -101,7 +102,7 @@
 /*-----------------------Volume------------------------*/
 
 // 创建数据卷们
-func createVolumes(volumesConfig []VolumeConfig) ([]volume2.Volume, error) {
+func createVolumes(volumesConfig []object.VolumeConfig) ([]volume2.Volume, error) {
 	var result []volume2.Volume
 	for _, config := range volumesConfig {
 		existed, err := isVolumeExisted(config.Name)
@@ -162,8 +163,8 @@
 /*----------------------Container------------------------*/
 
 // CreateContainers 创建容器们
-func CreateContainers(containerConfigs []Container) ([]ContainerMeta, error) {
-	var result []ContainerMeta
+func CreateContainers(containerConfigs []object.Container) ([]object.ContainerMeta, error) {
+	var result []object.ContainerMeta
 	var totalPort []int
 	dupMap := make(map[int32]bool)
 
@@ -185,7 +186,7 @@
 		return nil, err3
 	}
 	log.Println("OnCreate pause container")
-	result = append(result, ContainerMeta{Name: "pause", ContainerID: pauseID})
+	result = append(result, object.ContainerMeta{Name: "pause", ContainerID: pauseID})
 
 	for _, config := range containerConfigs {
 		// volume mount
@@ -241,7 +242,7 @@
 		log.Printf("OnCreate container %s\n", resp.ID)
 
 		// record container ID
-		result = append(result, ContainerMeta{
+		result = append(result, object.ContainerMeta{
 			Name:        config.Name,
 			ContainerID: resp.ID,
 		})
Index: pkg/api/pod/pod.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/api/pod/pod.go b/pkg/kubelet/pod/pod.go
rename from pkg/api/pod/pod.go
rename to pkg/kubelet/pod/pod.go
--- a/pkg/api/pod/pod.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/kubelet/pod/pod.go	(date 1682325286255)
@@ -1,8 +1,11 @@
 package pod
 
-import "fmt"
+import (
+	"fmt"
+	object2 "k8s/object"
+)
 
-func CreatePod(podConfig Pod) error {
+func CreatePod(podConfig object2.Pod) error {
 	// 拉取镜像
 	var images []string
 	for _, configItem := range podConfig.Spec.Containers {
@@ -27,7 +30,7 @@
 	}
 
 	// 创建pod中的容器
-	var containerMeta []ContainerMeta
+	var containerMeta []object2.ContainerMeta
 	containerMeta, err = CreateContainers(podConfig.Spec.Containers)
 	if err != nil {
 		fmt.Println(err.Error())
Index: pkg/apiserver/handlers/TestPodWatch.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/apiserver/handlers/TestPodWatch.go b/pkg/apiserver/listeners/TestPodListener.go
rename from pkg/apiserver/handlers/TestPodWatch.go
rename to pkg/apiserver/listeners/TestPodListener.go
--- a/pkg/apiserver/handlers/TestPodWatch.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/pkg/apiserver/listeners/TestPodListener.go	(date 1682327583917)
@@ -1,7 +1,8 @@
-package handlers
+package listeners
 
 import (
 	"fmt"
+	storagepb2 "github.com/coreos/etcd/storage/storagepb"
 	"k8s/pkg/etcd"
 )
 
@@ -21,16 +22,16 @@
 
 }
 
-func (p podListener) OnSet(key []byte, val []byte) {
-	fmt.Printf("set watcher of key " + string(key) + "\n")
+func (p podListener) OnSet(kv storagepb2.KeyValue) {
+	fmt.Printf("set watcher of key " + string(kv.Key) + "\n")
 	return
 }
-func (p podListener) OnModify(key []byte, val []byte) {
-	fmt.Printf("modify kye:" + string(key) + "value:" + string(val) + "\n")
+func (p podListener) OnModify(kv storagepb2.KeyValue) {
+	fmt.Printf("modify kye:" + string(kv.Key) + "value:" + string(kv.Value) + "\n")
 	return
 }
 
-func (p podListener) OnDelete(key []byte) {
-	fmt.Printf("delete kye:" + string(key) + "\n")
+func (p podListener) OnDelete(kv storagepb2.KeyValue) {
+	fmt.Printf("delete kye:" + string(kv.Key) + "\n")
 	return
 }
Index: pkg/api/pod/podTypes.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/api/pod/podTypes.go b/object/Pod.go
rename from pkg/api/pod/podTypes.go
rename to object/Pod.go
--- a/pkg/api/pod/podTypes.go	(revision 13f0b8e87c9917d97d7f2c50cf5b3e2ab260b03d)
+++ b/object/Pod.go	(date 1682325286555)
@@ -1,4 +1,4 @@
-package pod
+package object
 
 type ContainerPort struct {
 	Port int32 `yaml:"containerPort"`
@@ -62,3 +62,8 @@
 	Metadata   Metadata `yaml:"metadata"`
 	Spec       Spec     `yaml:"spec"`
 }
+
+type PodStorage struct {
+	Config Pod
+	Status Status
+}
diff --git a/pkg/api/pod/podConfigTest.yaml b/pkg/kubelet/pod/podConfigTest.yaml
rename from pkg/api/pod/podConfigTest.yaml
rename to pkg/kubelet/pod/podConfigTest.yaml
