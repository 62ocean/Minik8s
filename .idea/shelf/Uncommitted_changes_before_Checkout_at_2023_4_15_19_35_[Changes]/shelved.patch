Index: cmd/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"gopkg.in/yaml.v3\"\r\n\t\"k8s/pkg/api/pod\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\t// 解析pod的yaml配置文件\r\n\tdataBytes, err := os.ReadFile(\"D:\\\\Homework\\\\K8s\\\\repository\\\\k8s\\\\pkg\\\\pod\\\\podConfigTest.yaml\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"读取文件失败：\", err)\r\n\t\treturn\r\n\t}\r\n\tfmt.Println(\"yaml 文件的内容: \\n\", string(dataBytes))\r\n\tvar podData pod.Pod\r\n\terr2 := yaml.Unmarshal(dataBytes, &podData)\r\n\tif err2 != nil {\r\n\t\tfmt.Println(\"解析 yaml 文件失败：\", err)\r\n\t}\r\n\tfmt.Println(podData)\r\n\r\n\t// 根据配置文件创建容器\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmd/main.go b/cmd/main.go
--- a/cmd/main.go	
+++ b/cmd/main.go	
@@ -9,7 +9,7 @@
 
 func main() {
 	// 解析pod的yaml配置文件
-	dataBytes, err := os.ReadFile("D:\\Homework\\K8s\\repository\\k8s\\pkg\\pod\\podConfigTest.yaml")
+	dataBytes, err := os.ReadFile("pkg/api/pod/podConfigTest.yaml")
 	if err != nil {
 		fmt.Println("读取文件失败：", err)
 		return
Index: pkg/api/pod/podConfigTest.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apiVersion : v1\r\nkind: Pod\r\nmetadata :\r\n  name : nginx\r\nspec:\r\n  containers :\r\n    - name : nginx\r\n      image : nginx:1.14.2\r\n      ports:\r\n        - containerPort: 80\r\n    - name : nginx2\r\n      image: nginx:1.14.2\r\n      ports:\r\n        - containerPort: 80\r\n        - containerPort: 90\r\n
===================================================================
diff --git a/pkg/api/pod/podConfigTest.yaml b/pkg/api/pod/podConfigTest.yaml
--- a/pkg/api/pod/podConfigTest.yaml	
+++ b/pkg/api/pod/podConfigTest.yaml	
@@ -8,8 +8,35 @@
       image : nginx:1.14.2
       ports:
         - containerPort: 80
+      volumeMounts:
+        - mountPath: /usr/share/html
+          name: html
+      resources:
+        limits:
+          cpu: string
+          memory: string
+        requests:
+          cpu: string
+          memory: string
     - name : nginx2
       image: nginx:1.14.2
       ports:
         - containerPort: 80
         - containerPort: 90
+      command:
+        - sh
+      args:
+        - $(str)
+      volumeMounts:
+        - mountPath: /html
+          name: html
+      resources:
+        limits:
+          cpu: string
+          memory: string
+        requests:
+          cpu: string
+          memory: string
+  volumes:
+    - name: html
+      emptyDir: {}
\ No newline at end of file
Index: pkg/api/pod/container.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pod\r\n\r\nimport \"C\"\r\nimport (\r\n\t\"context\"\r\n\t\"fmt\"\r\n\t\"github.com/docker/docker/api/types\"\r\n\t\"github.com/docker/docker/api/types/container\"\r\n\t\"github.com/docker/docker/client\"\r\n\t\"github.com/docker/go-connections/nat\"\r\n\t\"time\"\r\n)\r\n\r\nvar Client = newClient()\r\nvar Ctx = context.Background()\r\n\r\nfunc newClient() *client.Client {\r\n\tcli, err := client.NewClientWithOpts(client.FromEnv)\r\n\tdefer cli.Close()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn cli\r\n}\r\n\r\n// 列出镜像\r\nfunc listImage() {\r\n\timages, err := Client.ImageList(Ctx, types.ImageListOptions{})\r\n\tlog(err)\r\n\r\n\tfor _, image := range images {\r\n\t\tfmt.Println(image)\r\n\t}\r\n}\r\n\r\n// 创建容器\r\nfunc createContainer(*container.Config) string {\r\n\texports := make(nat.PortSet, 10)\r\n\tport, err := nat.NewPort(\"tcp\", \"80\")\r\n\tlog(err)\r\n\texports[port] = struct{}{}\r\n\tconfig := &container.Config{Image: \"nginx\", ExposedPorts: exports}\r\n\r\n\tportBind := nat.PortBinding{HostPort: \"80\"}\r\n\tportMap := make(nat.PortMap, 0)\r\n\ttmp := make([]nat.PortBinding, 0, 1)\r\n\ttmp = append(tmp, portBind)\r\n\tportMap[port] = tmp\r\n\thostConfig := &container.HostConfig{PortBindings: portMap}\r\n\t// networkingConfig := &network.NetworkingConfig{}\r\n\tcontainerName := \"hel\"\r\n\tbody, err := Client.ContainerCreate(Ctx, config, hostConfig, nil, containerName)\r\n\tlog(err)\r\n\tfmt.Printf(\"ID: %s\\n\", body.ID)\r\n\treturn body.ID\r\n}\r\n\r\n// 启动容器\r\nfunc startContainer(containerID string) {\r\n\terr := Client.ContainerStart(Ctx, containerID, types.ContainerStartOptions{})\r\n\tlog(err)\r\n\tif err == nil {\r\n\t\tfmt.Println(\"容器\", containerID, \"启动成功\")\r\n\t}\r\n}\r\n\r\n// 停止容器\r\nfunc stopContainer(containerID string) {\r\n\ttimeout := time.Second * 10\r\n\terr := Client.ContainerStop(Ctx, containerID, &timeout)\r\n\tif err != nil {\r\n\t\tlog(err)\r\n\t} else {\r\n\t\tfmt.Printf(\"容器%s已经被停止\\n\", containerID)\r\n\t}\r\n}\r\n\r\n// 删除容器\r\nfunc removeContainer(containerID string) (string, error) {\r\n\terr := Client.ContainerRemove(Ctx, containerID, types.ContainerRemoveOptions{})\r\n\tlog(err)\r\n\treturn containerID, err\r\n}\r\n\r\nfunc log(err error) {\r\n\tif err != nil {\r\n\t\tfmt.Printf(\"%v\\n\", err)\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n
===================================================================
diff --git a/pkg/api/pod/container.go b/pkg/api/pod/container.go
--- a/pkg/api/pod/container.go	
+++ b/pkg/api/pod/container.go	
@@ -7,8 +7,6 @@
 	"github.com/docker/docker/api/types"
 	"github.com/docker/docker/api/types/container"
 	"github.com/docker/docker/client"
-	"github.com/docker/go-connections/nat"
-	"time"
 )
 
 var Client = newClient()
@@ -34,25 +32,17 @@
 }
 
 // 创建容器
-func createContainer(*container.Config) string {
-	exports := make(nat.PortSet, 10)
-	port, err := nat.NewPort("tcp", "80")
-	log(err)
-	exports[port] = struct{}{}
-	config := &container.Config{Image: "nginx", ExposedPorts: exports}
-
-	portBind := nat.PortBinding{HostPort: "80"}
-	portMap := make(nat.PortMap, 0)
-	tmp := make([]nat.PortBinding, 0, 1)
-	tmp = append(tmp, portBind)
-	portMap[port] = tmp
-	hostConfig := &container.HostConfig{PortBindings: portMap}
-	// networkingConfig := &network.NetworkingConfig{}
-	containerName := "hel"
-	body, err := Client.ContainerCreate(Ctx, config, hostConfig, nil, containerName)
-	log(err)
-	fmt.Printf("ID: %s\n", body.ID)
-	return body.ID
+func createContainer(conf Container) (string, error) {
+	// TODO: config containers port
+	config := &container.Config{Image: conf.Image}
+	res, err := Client.ContainerCreate(Ctx, config, nil, nil, nil, conf.Name)
+	for _, warning := range res.Warnings {
+		fmt.Println(warning)
+	}
+	if err == nil {
+		fmt.Printf("Create Container %s\n", res.ID)
+	}
+	return res.ID, err
 }
 
 // 启动容器
@@ -60,18 +50,18 @@
 	err := Client.ContainerStart(Ctx, containerID, types.ContainerStartOptions{})
 	log(err)
 	if err == nil {
-		fmt.Println("容器", containerID, "启动成功")
+		fmt.Printf("Start Container %s\n", containerID)
 	}
 }
 
 // 停止容器
 func stopContainer(containerID string) {
-	timeout := time.Second * 10
-	err := Client.ContainerStop(Ctx, containerID, &timeout)
+	// 默认的超时设置为10秒
+	err := Client.ContainerStop(Ctx, containerID, container.StopOptions{})
 	if err != nil {
 		log(err)
 	} else {
-		fmt.Printf("容器%s已经被停止\n", containerID)
+		fmt.Printf("Stop Container %s\n", containerID)
 	}
 }
 
@@ -79,6 +69,7 @@
 func removeContainer(containerID string) (string, error) {
 	err := Client.ContainerRemove(Ctx, containerID, types.ContainerRemoveOptions{})
 	log(err)
+	fmt.Printf("Remove Container %s\n", containerID)
 	return containerID, err
 }
 
Index: pkg/api/pod/pod.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pod\r\n\r\nimport \"github.com/docker/docker/api/types/container\"\r\n\r\nfunc CreatePod(podConfig Pod) error {\r\n\r\n\tfor _, configItme := range podConfig.Spec.Containers {\r\n\t\t// TODO: config containers port\r\n\t\tconfig := &container.Config{Image: configItme.Image}\r\n\r\n\t}\r\n}\r\n
===================================================================
diff --git a/pkg/api/pod/pod.go b/pkg/api/pod/pod.go
--- a/pkg/api/pod/pod.go	
+++ b/pkg/api/pod/pod.go	
@@ -1,12 +1,13 @@
 package pod
 
-import "github.com/docker/docker/api/types/container"
-
-func CreatePod(podConfig Pod) error {
-
-	for _, configItme := range podConfig.Spec.Containers {
-		// TODO: config containers port
-		config := &container.Config{Image: configItme.Image}
-
-	}
-}
+//func StartPod(podConfig Pod) error {
+//
+//	for _, configItme := range podConfig.Spec.Containers {
+//		ContainerID, err := createContainer(configItme)
+//
+//	}
+//}
+//
+//func TerminatePod() error {
+//
+//}
Index: pkg/api/pod/podTypes.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pod\r\n\r\ntype ContainerPort struct {\r\n\tPort int32 `yaml:\"containerPort\"`\r\n}\r\n\r\ntype Container struct {\r\n\tName  string          `yaml:\"name\"`\r\n\tImage string          `yaml:\"image\"`\r\n\tPorts []ContainerPort `yaml:\"ports\"`\r\n}\r\n\r\ntype Spec struct {\r\n\tContainers []Container `yaml:\"containers\"`\r\n}\r\n\r\ntype Metadata struct {\r\n\tName string `yaml:\"name\"`\r\n}\r\n\r\ntype Pod struct {\r\n\tApiVersion string   `yaml:\"apiVersion\"`\r\n\tKind       string   `yaml:\"kind\"`\r\n\tMetadata   Metadata `yaml:\"metadata\"`\r\n\tSpec       Spec     `yaml:\"spec\"`\r\n}\r\n
===================================================================
diff --git a/pkg/api/pod/podTypes.go b/pkg/api/pod/podTypes.go
--- a/pkg/api/pod/podTypes.go	
+++ b/pkg/api/pod/podTypes.go	
@@ -4,14 +4,52 @@
 	Port int32 `yaml:"containerPort"`
 }
 
+type ResourcesLimit struct {
+	CPU    string `yaml:"cpu"`
+	Memory string `yaml:"memory"`
+}
+
+type ResourcesRequest struct {
+	CPU    string `yaml:"cpu"`
+	Memory string `yaml:"memory"`
+}
+
+type Resources struct {
+	Limits   ResourcesLimit   `yaml:"limits"`
+	Requests ResourcesRequest `yaml:"requests"`
+}
+
+type MountsConfig struct {
+	Name      string `yaml:"name"`
+	MountPath string `yaml:"mountPath"`
+}
+
 type Container struct {
-	Name  string          `yaml:"name"`
-	Image string          `yaml:"image"`
-	Ports []ContainerPort `yaml:"ports"`
+	Name         string          `yaml:"name"`
+	Image        string          `yaml:"image"`
+	Ports        []ContainerPort `yaml:"ports"`
+	Command      []string        `yaml:"command"`
+	Args         []string        `yaml:"args"`
+	Resources    Resources       `yaml:"resources"`
+	VolumeMounts []MountsConfig  `yaml:"volumeMounts"`
+}
+
+type VolumeEmptyDirConfig struct {
+}
+
+type VolumeHostPathConfig struct {
+	Path string `yaml:"path"`
+}
+
+type VolumeConfig struct {
+	Name     string               `yaml:"name"`
+	EmptyDir VolumeEmptyDirConfig `yaml:"emptyDir"`
+	HostPath VolumeHostPathConfig `yaml:"hostPath"`
 }
 
 type Spec struct {
-	Containers []Container `yaml:"containers"`
+	Containers []Container    `yaml:"containers"`
+	Volumes    []VolumeConfig `yaml:"volumes"`
 }
 
 type Metadata struct {
